{"version":3,"sources":["components/Row/index.js","components/DropDown/index.js","pages/Main.js","components/Container/index.js","components/Col/index.js","components/TableHeader/index.js","components/TableBody/index.js","components/Table/index.js","App.js","serviceWorker.js","index.js"],"names":["Row","props","className","fluid","children","DropDown","name","type","keys","func","data-toggle","charAt","toUpperCase","slice","map","key","data-key","onClick","e","target","dataset","Main","useState","orderState","setOrderState","employees","employeesState","setEmployeesState","Object","keysState","setKeysState","departmentKeys","employee","push","department","Array","from","Set","reset","changeParams","affectedRow","query","sorted","sort","a","b","eval","filtered","filter","style","fontSize","size","data","Container","Col","split","join","TableHeader","scope","TableBody","datapoint","id","firstName","lastName","title","salary","Table","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.b4f295cd.chunk.js","sourcesContent":["import React from \"react\";\n\nfunction Row(props) {\n  return <div className={`row${props.fluid ? \"-fluid\" : \"\"}`}>\n    {props.children}\n  </div>;\n};\n\nexport default Row;\n","import React from \"react\";\n\nfunction DropDown({ name, type, keys, func }) {\n  return <div>\n    <button type=\"button\" className={`btn btn-${type} dropdown-toggle btn-lg btn-block`} data-toggle=\"dropdown\">\n      {name.charAt(0).toUpperCase() + name.slice(1)}\n    </button>\n    <div className=\"dropdown-menu\">\n      {keys.map(key => {\n        return <button className=\"dropdown-item\" type=\"button\" key={key} data-key={key} onClick={e => {\n          func(name, e.target.dataset.key)\n        }}>\n          {key.charAt(0).toUpperCase() + key.slice(1)}\n        </button>\n      })}\n\n    </div>\n  </div>\n};\n\nexport default DropDown;\n","import React, { useState } from 'react';\nimport Container from \"../components/Container\";\nimport Row from \"../components/Row\";\nimport Col from \"../components/Col\";\nimport Table from \"../components/Table\";\nimport DropDown from \"../components/DropDown\";\nimport employees from \"../employees.json\";\n\nfunction Main() {\n  const [orderState, setOrderState] = useState('id');\n  const [employeesState, setEmployeesState] = useState(employees);\n  const [keysState, setKeysState] = useState(Object.keys(employeesState[0]));\n\n  function departmentKeys() {\n    let keys = [];\n    employeesState.map(employee => {\n      keys.push(employee.department);\n    });\n    let uniqueKeys = Array.from(new Set(keys));\n    return uniqueKeys;\n  };\n\n  function reset() {\n    setEmployeesState(employees);\n  };\n\n  function changeParams(type, affectedRow) {\n    if (type === \"sort\") {\n      setOrderState(affectedRow);\n      if (affectedRow === \"salary\" || affectedRow === \"id\") {\n        const query = `a.${affectedRow} - b.${affectedRow}`\n        const sorted = employeesState.sort((a, b) => eval(query));\n      } else {\n        const query = `a.${affectedRow}.localeCompare(b.${affectedRow})`;\n        const sorted = employeesState.sort((a, b) => eval(query));\n      };\n    } else {\n      const filtered = employeesState.filter((employee) => {\n        return employee.department === affectedRow\n      });\n      setEmployeesState(filtered);\n    }\n  };\n\n  return (\n    <div className=\"my-5\">\n      <Container>\n        <Row>\n          <h1 style={{ fontSize: \"2em\" }}>Employee Directory<small className=\"text-muted\"> - Sorting by {orderState}</small></h1>\n          <div className=\"col\">\n            <DropDown name=\"sort\" type=\"success\" keys={keysState} func={changeParams} />\n          </div>\n          <div className=\"col\">\n            <DropDown name=\"Filter by Dept\" type=\"secondary\" keys={departmentKeys()} func={changeParams} />\n          </div>\n          <div className=\"col\">\n            <button className=\"btn btn-danger btn-lg btn-block\" onClick={() => reset()}>Reset Filter</button>\n          </div>\n        </Row>\n          &nbsp;\n        <Row>\n          <Col size=\"md-12\" className=\"col-md-12 d-flex justify-content-center align-content-center\">\n            <Table keys={keysState} data={employeesState} />\n          </Col>\n        </Row>\n      </Container>\n    </div>\n  )\n}\n\nexport default Main;\n","import React from \"react\";\n\nfunction Container(props) {\n  return <div className={`container${props.fluid ? \"-fluid\" : \"\"}`} {...props} />\n};\n\nexport default Container;\n","import React from \"react\";\n\nfunction Col(props) {\n  const size = props.size.split(\" \").map(size => \"col-\" + size).join(\" \");\n\n  return <div className={size} {...props} />\n};\n\nexport default Col;\n","import React from \"react\";\n\nfunction TableHeader({ keys }) {\n  return <thead className=\"thead-dark\">\n    <tr>\n      {keys.map(key => {\n        return <th scope=\"col\" key={key}>{key}</th>\n      })}\n    </tr>\n  </thead>\n};\n\nexport default TableHeader;\n","import React from \"react\";\n\nfunction TableBody({ data }) {\n  return <tbody>\n    {data.map(datapoint => {\n      return <tr key={datapoint.id}>\n        <td>{datapoint.id}</td>\n        <td>{datapoint.firstName}</td>\n        <td>{datapoint.lastName}</td>\n        <td>{datapoint.title}</td>\n        <td>{datapoint.department}</td>\n        <td>{datapoint.salary}</td>\n      </tr>\n    })}\n  </tbody>\n};\n\nexport default TableBody;\n","import React from \"react\";\nimport TableHeader from \"../TableHeader\";\nimport TableBody from \"../TableBody\";\n\n// Requires keys and table data\nfunction Table({ keys, data }) {\n  return (\n    <div className=\"table-responsive\">\n      <table className=\"table table-hover table-light\">\n        <TableHeader keys={keys} />\n        <TableBody data={data} />\n      </table>\n    </div>\n  );\n};\n\nexport default Table;\n","import React, { Component } from 'react'\nimport Main from \"./pages/Main\";\n\nfunction App() {\n  return (\n    <Main />\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}